name: CD-reusable
on:
  workflow_call:
    inputs:
      cdTarget:
        required: true
        type: string
      buildFolder:
        required: true
        type: string
      domain:
        required: true
        type: string
      secretSuffix:
        required: false
        type: string
        default: ""
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      S3_BUCKET_REGION:
        required: true
      SLACK_WEBHOOK:
        required: true

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: git_checkout
        uses: actions/checkout@v3

      - name: Get Latest Tag
        id: latest-tag
        uses: actions-ecosystem/action-get-latest-tag@v1

      - name: Set Env
        if: always()
        run: |
          echo target=$(echo ${{ inputs.domain }} | cut -d"-" -f1 | tr [:lower:] [:upper:]) >> $GITHUB_ENV
          echo suffixUpper=$(echo ${{inputs.secretSuffix}} | tr [:lower:] [:upper:]) >> $GITHUB_ENV
          echo tag=${{ steps.latest-tag.outputs.tag }} >> $GITHUB_ENV

      - name: Set Deploy Info file
        if: always()
        run: |
          echo - 대상: ${{ env.target }}  > deployInfo.txt
          echo - 도메인: ${{ inputs.domain }} >> deployInfo.txt
          echo - 버전 태그: ${{ env.tag }} >> deployInfo.txt
          echo - suffix: ${{ env.suffixUpper }} >> deployInfo.txt

      - name: Deploy Start
        # if: env.target != 'DEV' || env.target != 'FEAT'
        if: always()
        run: |
          echo 'DEPLOY_SLACK_MESSAGE<<EOF' >> $GITHUB_ENV
          head deployInfo.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Send status to Slack channel in case of deploy start
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 일반
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "test 배포 시작 : [배포 진행 중]"
          SLACK_MESSAGE: ${{ env.DEPLOY_SLACK_MESSAGE }}
          SLACK_USERNAME: AC BOT

      - name: Send status to Slack channel in case of success
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          # 채널 수정
          SLACK_CHANNEL: 일반
          SLACK_TITLE: test 배포 [실패]
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: ${{ env.DEPLOY_SLACK_MESSAGE }}
          SLACK_USERNAME: AC BOT

      - name: Send status to Slack channel in case of success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 일반
          SLACK_TITLE: "test 배포[완료]"
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: ${{ env.DEPLOY_SLACK_MESSAGE }}
          SLACK_USERNAME: AC BOT

      - name: Job Summary
        if: always()
        env:
          aws_configuration: ${{ steps.aws_configuration.outcome == 'success' && ':white_check_mark:' || ':x:' }}
          put_bucket_policy: ${{ steps.put_bucket_policy.outcome == 'success' && ':white_check_mark:' || ':x:' }}
        run: |
          echo "# Deployment Summary Table" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Jobs | Results |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Get latest tag | ${{ steps.latest-tag.outputs.tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ inputs.domain }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Get secret suffix | ${{ env.suffixUpper }} |" >> $GITHUB_STEP_SUMMARY
          echo "| AWS configuration | ${{ env.aws_configuration }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Put bucket policy | ${{ env.put_bucket_policy }} |" >> $GITHUB_STEP_SUMMARY
